<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>Class: ActionController::MimeResponds::Responder</title>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
  <meta http-equiv="Content-Script-Type" content="text/javascript" />
  <link rel="stylesheet" href="../../.././rdoc-style.css" type="text/css" media="screen" />
  <script type="text/javascript">
  // <![CDATA[

  function popupCode( url ) {
    window.open(url, "Code", "resizable=yes,scrollbars=yes,toolbar=no,status=no,height=150,width=400")
  }

  function toggleCode( id ) {
    if ( document.getElementById )
      elem = document.getElementById( id );
    else if ( document.all )
      elem = eval( "document.all." + id );
    else
      return false;

    elemStyle = elem.style;
    
    if ( elemStyle.display != "block" ) {
      elemStyle.display = "block"
    } else {
      elemStyle.display = "none"
    }

    return true;
  }
  
  // Make codeblocks hidden by default
  document.writeln( "<style type=\"text/css\">div.method-source-code { display: none }</style>" )
  
  // ]]>
  </script>

</head>
<body>



    <div id="classHeader">
        <table class="header-table">
        <tr class="top-aligned-row">
          <td><strong>Class</strong></td>
          <td class="class-name-in-header">ActionController::MimeResponds::Responder</td>
        </tr>
        <tr class="top-aligned-row">
            <td><strong>In:</strong></td>
            <td>
                <a href="../../../files/lib/dynamime_rb.html">
                lib/dynamime.rb
                </a>
        <br />
            </td>
        </tr>

        <tr class="top-aligned-row">
            <td><strong>Parent:</strong></td>
            <td>
                Object
            </td>
        </tr>
        </table>
    </div>
  <!-- banner header -->

  <div id="bodyContent">



  <div id="contextContent">



   </div>

    <div id="method-list">
      <h3 class="section-bar">Methods</h3>

      <div class="name-list">
      <a href="#M000002">custom</a>&nbsp;&nbsp;
      <a href="#M000003">respond</a>&nbsp;&nbsp;
      </div>
    </div>

  </div>


    <!-- if includes -->
    <div id="includes">
      <h3 class="section-bar">Included Modules</h3>

      <div id="includes-list">
        <span class="include-name"><a href="../../Dynamime.html">Dynamime</a></span>
      </div>
    </div>

    <div id="section">



    <div id="aliases-list">
      <h3 class="section-bar">External Aliases</h3>

      <div class="name-list">
                        <table summary="aliases">
        <tr class="top-aligned-row context-row">
          <td class="context-item-name">custom</td>
          <td>-&gt;</td>
          <td class="context-item-value">orig_custom</td>
        </tr>
                        </table>
      </div>
    </div>


      


    <!-- if method_list -->
    <div id="methods">
      <h3 class="section-bar">Public Instance methods</h3>

      <div id="method-M000002" class="method-detail">
        <a name="M000002"></a>

        <div class="method-heading">
          <a href="#M000002" class="method-signature">
          <span class="method-name">custom</span><span class="method-args">(mime_type, &amp;block)</span>
          </a>
        </div>
      
        <div class="method-description">
          <p>
for normal mime types, just call the original <a
href="Responder.html#M000002">custom</a> method. For dynamimed types, also
build responder blocks for subtypes of that devices, so e.g. the following
code would include a responder to all kinds of mobile devices and normal
browsers:
</p>
<pre>
   respond_to do |format|
     format.mobile
     format.html
   end
</pre>
<p>
however, this example only creates a responder for Nokia devices, iPhones
and normal browsers:
</p>
<pre>
   respond_to do |format|
     format.nokia
     format.iphone
     format.html
   end
</pre>
          <p><a class="source-toggle" href="#"
            onclick="toggleCode('M000002-source');return false;">[Source]</a></p>
          <div class="method-source-code" id="M000002-source">
<pre>
     <span class="ruby-comment cmt"># File lib/dynamime.rb, line 222</span>
222:       <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">custom</span>(<span class="ruby-identifier">mime_type</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
223: <span class="ruby-comment cmt">#         debug_message &quot;called custom(#{mime_type.inspect})&quot;</span>
224: <span class="ruby-comment cmt">#         mime_type = Dynamime::Type.lookup_by_extension(mime_type.to_sym)</span>
225:         <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">mime_type</span>.<span class="ruby-identifier">is_a?</span> <span class="ruby-constant">Dynamime</span><span class="ruby-operator">::</span><span class="ruby-constant">Type</span>
226: <span class="ruby-comment cmt">#           debug_message &quot;NOT a Dynamime::Type: #{mime_type.inspect} -- using original `custom` method.&quot;</span>
227:           <span class="ruby-keyword kw">return</span> <span class="ruby-identifier">orig_custom</span>(<span class="ruby-identifier">mime_type</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
228:         <span class="ruby-keyword kw">end</span>
229:         <span class="ruby-identifier">sub_types</span> = <span class="ruby-identifier">mime_type</span>.<span class="ruby-identifier">subtypes</span>
230:         <span class="ruby-comment cmt"># first, make responder blocks for the subtypes...</span>
231:         <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">sub_types</span>.<span class="ruby-identifier">any?</span>
232:           <span class="ruby-identifier">sub_types</span>.<span class="ruby-identifier">each</span> {<span class="ruby-operator">|</span><span class="ruby-identifier">t</span><span class="ruby-operator">|</span> <span class="ruby-identifier">custom</span>(<span class="ruby-identifier">t</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>) }
233:         <span class="ruby-keyword kw">end</span>
234:         <span class="ruby-comment cmt"># ...then, make a responder for the current type:</span>
235:         <span class="ruby-keyword kw">unless</span> <span class="ruby-ivar">@responses</span>[<span class="ruby-identifier">mime_type</span>]
236:           <span class="ruby-ivar">@order</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">mime_type</span>
237: <span class="ruby-comment cmt">#           debug_message &quot;Making a responder block for #{mime_type.to_sym} (#{mime_type.to_s})&quot;</span>
238:           <span class="ruby-ivar">@responses</span>[<span class="ruby-identifier">mime_type</span>] = <span class="ruby-constant">Proc</span>.<span class="ruby-identifier">new</span> <span class="ruby-keyword kw">do</span>
239:             <span class="ruby-identifier">debug_message</span> <span class="ruby-node">&quot;In responder: #{mime_type.to_s} (#{mime_type.to_sym})&quot;</span>
240:             <span class="ruby-ivar">@response</span>.<span class="ruby-identifier">template</span>.<span class="ruby-identifier">template_format</span> = <span class="ruby-identifier">mime_type</span>.<span class="ruby-identifier">to_sym</span>
241:             <span class="ruby-ivar">@response</span>.<span class="ruby-identifier">content_type</span>             = <span class="ruby-identifier">mime_type</span>.<span class="ruby-identifier">to_s</span>
242:             <span class="ruby-comment cmt"># try to call the block or render the template for this action. if it fails, just return false.</span>
243:             <span class="ruby-comment cmt"># if we are responding to a subtype of any MIME type, the parent type will hopefully proceed.</span>
244:             <span class="ruby-identifier">block_given?</span> <span class="ruby-value">? </span><span class="ruby-identifier">block</span>.<span class="ruby-identifier">call</span> <span class="ruby-operator">:</span> <span class="ruby-ivar">@controller</span>.<span class="ruby-identifier">send</span>(<span class="ruby-identifier">:render</span>, <span class="ruby-identifier">:action</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-ivar">@controller</span>.<span class="ruby-identifier">action_name</span>)
245:             <span class="ruby-identifier">debug_message</span> <span class="ruby-node">&quot;block given #{block.to_s}&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">block_given?</span>
246:             <span class="ruby-identifier">debug_message</span> <span class="ruby-node">&quot;rendering #{@controller.action_name}&quot;</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">block_given?</span>
247:           <span class="ruby-keyword kw">end</span>
248:         <span class="ruby-keyword kw">end</span>
249:       <span class="ruby-keyword kw">end</span>
</pre>
          </div>
        </div>
      </div>

      <div id="method-M000003" class="method-detail">
        <a name="M000003"></a>

        <div class="method-heading">
          <a href="#M000003" class="method-signature">
          <span class="method-name">respond</span><span class="method-args">()</span>
          </a>
        </div>
      
        <div class="method-description">
          <p><a class="source-toggle" href="#"
            onclick="toggleCode('M000003-source');return false;">[Source]</a></p>
          <div class="method-source-code" id="M000003-source">
<pre>
     <span class="ruby-comment cmt"># File lib/dynamime.rb, line 251</span>
251:       <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">respond</span>
252:         <span class="ruby-identifier">debug_message</span> <span class="ruby-node">&quot;MimeResponds::Responder#respond: @mime_type_priority (accepted types): #{@mime_type_priority.inspect}&quot;</span>
253:         <span class="ruby-identifier">debug_message</span> <span class="ruby-node">&quot;MimeResponds::Responder#respond: @order (offered types): #{@order.inspect}&quot;</span>
254:         <span class="ruby-keyword kw">for</span> <span class="ruby-identifier">priority</span> <span class="ruby-keyword kw">in</span> <span class="ruby-ivar">@mime_type_priority</span>
255:           <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">priority</span> <span class="ruby-operator">==</span> <span class="ruby-constant">Dynamime</span><span class="ruby-operator">::</span><span class="ruby-constant">ALL</span>
256:             <span class="ruby-identifier">debug_message</span> <span class="ruby-node">&quot;found MIME::ALL =&gt; responding with '#{priority.to_sym}'&quot;</span>
257:             <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@order</span>.<span class="ruby-identifier">include?</span> <span class="ruby-constant">Dynamime</span><span class="ruby-operator">::</span><span class="ruby-constant">HTML</span>
258:               <span class="ruby-ivar">@responses</span>[<span class="ruby-constant">Dynamime</span><span class="ruby-operator">::</span><span class="ruby-constant">HTML</span>].<span class="ruby-identifier">call</span>
259:             <span class="ruby-keyword kw">else</span>
260:               <span class="ruby-ivar">@responses</span>[<span class="ruby-ivar">@order</span>.<span class="ruby-identifier">first</span>].<span class="ruby-identifier">call</span>
261:             <span class="ruby-keyword kw">end</span>
262:             <span class="ruby-keyword kw">return</span>
263:           <span class="ruby-keyword kw">elsif</span> <span class="ruby-ivar">@responses</span>[<span class="ruby-identifier">priority</span>]
264:             <span class="ruby-comment cmt"># Since hierarchical MIME types are registered in most specific -&gt; least specific order,</span>
265:             <span class="ruby-comment cmt"># a failure of a more specific responder does not neccessarily mean a general error.</span>
266:             <span class="ruby-comment cmt"># in that case, we try other responders until either a responder for a parent type</span>
267:             <span class="ruby-comment cmt"># succeeds or we just run out of responders.</span>
268:             <span class="ruby-keyword kw">begin</span>
269:               <span class="ruby-identifier">debug_message</span> <span class="ruby-node">&quot;Responding to block for #{priority.to_sym} (#{priority.to_s})&quot;</span>
270:               <span class="ruby-ivar">@responses</span>[<span class="ruby-identifier">priority</span>].<span class="ruby-identifier">call</span>
271:               <span class="ruby-keyword kw">return</span> <span class="ruby-comment cmt"># mime type match found, be happy and return</span>
272:             <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">ActionView</span><span class="ruby-operator">::</span><span class="ruby-constant">MissingTemplate</span>
273:               <span class="ruby-identifier">debug_message</span> <span class="ruby-node">&quot;ActionView::MissingTemplate while responding to #{priority.to_sym} (#{priority.to_s})&quot;</span>
274:             <span class="ruby-keyword kw">end</span>
275:           <span class="ruby-keyword kw">end</span>
276:         <span class="ruby-keyword kw">end</span>
277: 
278:         <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@order</span>.<span class="ruby-identifier">include?</span>(<span class="ruby-constant">Dynamime</span><span class="ruby-operator">::</span><span class="ruby-constant">ALL</span>)
279:           <span class="ruby-identifier">debug_message</span> <span class="ruby-node">&quot;found no suitable responder, using #{Dynamime::ALL.to_sym} (#{Dynamime::ALL.to_s})&quot;</span>
280:           <span class="ruby-ivar">@responses</span>[<span class="ruby-constant">Dynamime</span><span class="ruby-operator">::</span><span class="ruby-constant">ALL</span>].<span class="ruby-identifier">call</span>
281:         <span class="ruby-keyword kw">else</span>
282:           <span class="ruby-ivar">@controller</span>.<span class="ruby-identifier">send</span> <span class="ruby-identifier">:head</span>, <span class="ruby-identifier">:not_acceptable</span>
283:         <span class="ruby-keyword kw">end</span>
284:       <span class="ruby-keyword kw">end</span>
</pre>
          </div>
        </div>
      </div>


    </div>


  </div>


<div id="validator-badges">
  <p><small><a href="http://validator.w3.org/check/referer">[Validate]</a></small></p>
</div>

</body>
</html>